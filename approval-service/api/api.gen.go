// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
)

// Defines values for PaymentStatus.
const (
	APPROVED PaymentStatus = "APPROVED"
	PENDING  PaymentStatus = "PENDING"
	REJECTED PaymentStatus = "REJECTED"
)

// Defines values for ReviewEvent.
const (
	APPROVE ReviewEvent = "APPROVE"
	REJECT  ReviewEvent = "REJECT"
)

// CreatePaymentRequest defines model for CreatePaymentRequest.
type CreatePaymentRequest struct {
	RequestId uuid.UUID `json:"request_id"`
}

// CreateReviewRequest defines model for CreateReviewRequest.
type CreateReviewRequest struct {
	Comment    *string     `json:"comment,omitempty"`
	Event      ReviewEvent `json:"event"`
	ReviewerId string      `json:"reviewer_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ListPaymentsResponse defines model for ListPaymentsResponse.
type ListPaymentsResponse struct {
	NextPageToken *string   `json:"next_page_token,omitempty"`
	Payments      []Payment `json:"payments"`
}

// Payment defines model for Payment.
type Payment struct {
	CreateTime time.Time     `json:"create_time"`
	Id         int64         `json:"id"`
	Remark     *string       `json:"remark,omitempty"`
	RequestId  uuid.UUID     `json:"request_id"`
	Reviews    []Review      `json:"reviews"`
	Status     PaymentStatus `json:"status"`
	UpdateTime time.Time     `json:"update_time"`
}

// PaymentStatus defines model for PaymentStatus.
type PaymentStatus string

// Review defines model for Review.
type Review struct {
	Comment    *string     `json:"comment,omitempty"`
	CreateTime time.Time   `json:"create_time"`
	Event      ReviewEvent `json:"event"`
	Id         int64       `json:"id"`
	ReviewerId string      `json:"reviewer_id"`
	UpdateTime time.Time   `json:"update_time"`
}

// ReviewEvent defines model for ReviewEvent.
type ReviewEvent string

// ListPaymentsParams defines parameters for ListPayments.
type ListPaymentsParams struct {
	// Statuses The list of statuses for filtering. if not specified, it will include all statuses.
	Statuses *[]PaymentStatus `form:"statuses,omitempty" json:"statuses,omitempty"`

	// BeforeCreateTimestamp Query the payments before the create timestamp. if not specified, it will use current timestamp
	BeforeCreateTimestamp *int64 `form:"before_create_timestamp,omitempty" json:"before_create_timestamp,omitempty"`

	// PageToken Request a specific page for a list of payments
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// PageSize Specify the maximum number of payments for a page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreatePaymentJSONRequestBody defines body for CreatePayment for application/json ContentType.
type CreatePaymentJSONRequestBody = CreatePaymentRequest

// CreatePaymentReviewJSONRequestBody defines body for CreatePaymentReview for application/json ContentType.
type CreatePaymentReviewJSONRequestBody = CreateReviewRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List payments
	// (GET /payments)
	ListPayments(w http.ResponseWriter, r *http.Request, params ListPaymentsParams)
	// Create payment
	// (POST /payments)
	CreatePayment(w http.ResponseWriter, r *http.Request)
	// Get payment by id
	// (GET /payments/{paymentID})
	GetPaymentByID(w http.ResponseWriter, r *http.Request, paymentID int64)
	// Create review for payment
	// (POST /payments/{paymentID}/reviews)
	CreatePaymentReview(w http.ResponseWriter, r *http.Request, paymentID int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListPayments operation middleware
func (siw *ServerInterfaceWrapper) ListPayments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaymentsParams

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	// ------------- Optional query parameter "before_create_timestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "before_create_timestamp", r.URL.Query(), &params.BeforeCreateTimestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before_create_timestamp", Err: err})
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_token", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPayments(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePayment(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPaymentByID operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "paymentID" -------------
	var paymentID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "paymentID", runtime.ParamLocationPath, chi.URLParam(r, "paymentID"), &paymentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paymentID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentByID(w, r, paymentID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePaymentReview operation middleware
func (siw *ServerInterfaceWrapper) CreatePaymentReview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "paymentID" -------------
	var paymentID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "paymentID", runtime.ParamLocationPath, chi.URLParam(r, "paymentID"), &paymentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paymentID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePaymentReview(w, r, paymentID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/payments", wrapper.ListPayments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments", wrapper.CreatePayment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/payments/{paymentID}", wrapper.GetPaymentByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments/{paymentID}/reviews", wrapper.CreatePaymentReview)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhT9KwS3R8Vyt2wo9NY2XuChyLKk2UsRBLR0ZbMVP0peufEC/feB1BdlK05c",
	"pGke9uZIJO+595x7eJU7miqhlQSJliZ31KYrEMz/fGeAIZyzjQCJF/ClBIvuuTZKg0EOfpWpX9zwzP2V",
	"KyMY0oSWJc9oRHGjgSbUouFySSN6e7RUR81Dt2RydTU/CZ8fcaGV8XEkE9CfpBmuaEKXHFflYpIqES+V",
	"WhYQ+/dVVUUeCjeQ0eRjCOu6g6EWnyBFWkVNbhew5vD13tRSJVzq7ucwjyqisG7e/Gwgpwn9Ke7rGDdF",
	"jOvzZ36px+f+BNPUauvMrQTqAMNNY5nMjFHmAqxW0sJYDhkEwbhEWIJxGwVYy5bwMBJ/RL9+DMR7brER",
	"ir0fi4RbvNFsCTeoPoMcratuTnEvOYKwD9W4Cev2NocxY9hmJ4vu4DH87SG75fM6uUEuYCDvjCEc+afR",
	"bg5brcAl/n7crwsoMCCY+Txah5fSVq0AH09ILfpdPiJqkWH5WEIv68VVREudHcrBFvc+06CiHZQ+u2hA",
	"9TDoHsVcdimBLIWLdT47O5mfndKIvjk/v/jrn5nj4WL25+zdh9lJcFRPdVOwg+znm3T5LZ51gJb3mduT",
	"sThmi4dyF6YYMNfw1dE1QpaDxGWu3LYMbGq4Rq4kTeglF7oAwrQ2as0KYjcWQZBcGdI4j8uPY+GOe9Ou",
	"ugSz5qnDvAZj65Omk1eTqYOpNEimOU3or5PpZNo0q5dGHNrkEnwaTjrMoZlnNBk4st9pmAAEY2nycRv7",
	"hxWQglskKid1Y4D1yHNeILjMJ4TnRCokVkPKcw5ZRDiSr7woCJdpUWZAWFF0uyeOqVtd+MsHTQmubDSh",
	"X0owGxq1HtQudw3p5Xeo6/cmse392zn+7SITXEFLhyULyJUB/6zWD3GKsciE3pdvaYGkpTEgsd9AxxOs",
	"Q9wE8mxX9/k+2Fu7yTQTC2EtvpS4a9VzxjoqdU//GLbgIg7h7PTgjtJ9yLqWgt1yUQoiS7EAEwZtsLgg",
	"++Jb/i8MwmeQs7JAmvw2HanEtWv8erzwEvllOq2dUmLTzEzrgqe+D+JPVsl+pn1IUqMzjO/4Yf7vt8tb",
	"RfT4CXEMB7oRAHO5ZgXPCJe69H7W1ey5EFxJuNWQImQE3Fpv1bYUgplNW6GwPFrZEYsafF/0F/RblW2e",
	"LJXRb5iRjOp1LWjSQKHhBeRsrPqO+usG2fvQZSSYdf9XXKi4IX3+ZXdFxnfNr/lJde91eQpt77/d+Ml5",
	"74U5PwkMoLU3P0kH7tbE3NHQYd5//WMUd941QsuJk9zx8xF+ppD8oUqZvUS5nULnb2SxIc2H0qji4uDz",
	"6RE22HwLvDD9fS9fHv7/5X5brmt4gCsf7w7odSyCiizaeS/78Ub6rD3VNrUbbPOX2ltDysPvJ3+WBbNu",
	"m6I0BU3oClEncVyolBUrZTF5PX39ilbX1X8BAAD//5v4JEfbFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
