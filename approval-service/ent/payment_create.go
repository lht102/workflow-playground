// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lht102/workflow-playground/approval-service/ent/payment"
	"github.com/lht102/workflow-playground/approval-service/ent/review"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRequestID sets the "request_id" field.
func (pc *PaymentCreate) SetRequestID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetRequestID(u)
	return pc
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableRequestID(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetRequestID(*u)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PaymentCreate) SetStatus(pa payment.Status) *PaymentCreate {
	pc.mutation.SetStatus(pa)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStatus(pa *payment.Status) *PaymentCreate {
	if pa != nil {
		pc.SetStatus(*pa)
	}
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PaymentCreate) SetRemark(s string) *PaymentCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableRemark(s *string) *PaymentCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetCreateTime sets the "create_time" field.
func (pc *PaymentCreate) SetCreateTime(t time.Time) *PaymentCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreateTime(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PaymentCreate) SetUpdateTime(t time.Time) *PaymentCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdateTime(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PaymentCreate) SetID(i int64) *PaymentCreate {
	pc.mutation.SetID(i)
	return pc
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pc *PaymentCreate) AddReviewIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddReviewIDs(ids...)
	return pc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pc *PaymentCreate) AddReviews(r ...*Review) *PaymentCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReviewIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	pc.defaults()
	return withHooks[*Payment, PaymentMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.RequestID(); !ok {
		v := payment.DefaultRequestID()
		pc.mutation.SetRequestID(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := payment.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := payment.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := payment.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "Payment.request_id"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Payment.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Remark(); ok {
		if err := payment.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Payment.remark": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Payment.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Payment.update_time"`)}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payment.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.RequestID(); ok {
		_spec.SetField(payment.FieldRequestID, field.TypeUUID, value)
		_node.RequestID = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.SetField(payment.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(payment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(payment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := pc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.ReviewsTable,
			Columns: []string{payment.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.Create().
//		SetRequestID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetRequestID(v+v).
//		}).
//		Exec(ctx)
func (pc *PaymentCreate) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertOne {
	pc.conflict = opts
	return &PaymentUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PaymentCreate) OnConflictColumns(columns ...string) *PaymentUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertOne{
		create: pc,
	}
}

type (
	// PaymentUpsertOne is the builder for "upsert"-ing
	//  one Payment node.
	PaymentUpsertOne struct {
		create *PaymentCreate
	}

	// PaymentUpsert is the "OnConflict" setter.
	PaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *PaymentUpsert) SetStatus(v payment.Status) *PaymentUpsert {
	u.Set(payment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateStatus() *PaymentUpsert {
	u.SetExcluded(payment.FieldStatus)
	return u
}

// SetRemark sets the "remark" field.
func (u *PaymentUpsert) SetRemark(v string) *PaymentUpsert {
	u.Set(payment.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateRemark() *PaymentUpsert {
	u.SetExcluded(payment.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PaymentUpsert) ClearRemark() *PaymentUpsert {
	u.SetNull(payment.FieldRemark)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PaymentUpsert) SetUpdateTime(v time.Time) *PaymentUpsert {
	u.Set(payment.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUpdateTime() *PaymentUpsert {
	u.SetExcluded(payment.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentUpsertOne) UpdateNewValues() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(payment.FieldID)
		}
		if _, exists := u.create.mutation.RequestID(); exists {
			s.SetIgnore(payment.FieldRequestID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(payment.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaymentUpsertOne) Ignore() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertOne) DoNothing() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreate.OnConflict
// documentation for more info.
func (u *PaymentUpsertOne) Update(set func(*PaymentUpsert)) *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *PaymentUpsertOne) SetStatus(v payment.Status) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateStatus() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *PaymentUpsertOne) SetRemark(v string) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateRemark() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PaymentUpsertOne) ClearRemark() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearRemark()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PaymentUpsertOne) SetUpdateTime(v time.Time) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUpdateTime() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *PaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	builders []*PaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetRequestID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertBulk {
	pcb.conflict = opts
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PaymentCreateBulk) OnConflictColumns(columns ...string) *PaymentUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// PaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of Payment nodes.
type PaymentUpsertBulk struct {
	create *PaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaymentUpsertBulk) UpdateNewValues() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(payment.FieldID)
			}
			if _, exists := b.mutation.RequestID(); exists {
				s.SetIgnore(payment.FieldRequestID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(payment.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaymentUpsertBulk) Ignore() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertBulk) DoNothing() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentUpsertBulk) Update(set func(*PaymentUpsert)) *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *PaymentUpsertBulk) SetStatus(v payment.Status) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateStatus() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *PaymentUpsertBulk) SetRemark(v string) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateRemark() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PaymentUpsertBulk) ClearRemark() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearRemark()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PaymentUpsertBulk) SetUpdateTime(v time.Time) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUpdateTime() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *PaymentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
