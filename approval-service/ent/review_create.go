// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lht102/workflow-playground/approval-service/ent/payment"
	"github.com/lht102/workflow-playground/approval-service/ent/review"
)

// ReviewCreate is the builder for creating a Review entity.
type ReviewCreate struct {
	config
	mutation *ReviewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEvent sets the "event" field.
func (rc *ReviewCreate) SetEvent(r review.Event) *ReviewCreate {
	rc.mutation.SetEvent(r)
	return rc
}

// SetReviewerID sets the "reviewer_id" field.
func (rc *ReviewCreate) SetReviewerID(s string) *ReviewCreate {
	rc.mutation.SetReviewerID(s)
	return rc
}

// SetComment sets the "comment" field.
func (rc *ReviewCreate) SetComment(s string) *ReviewCreate {
	rc.mutation.SetComment(s)
	return rc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableComment(s *string) *ReviewCreate {
	if s != nil {
		rc.SetComment(*s)
	}
	return rc
}

// SetCreateTime sets the "create_time" field.
func (rc *ReviewCreate) SetCreateTime(t time.Time) *ReviewCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableCreateTime(t *time.Time) *ReviewCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *ReviewCreate) SetUpdateTime(t time.Time) *ReviewCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableUpdateTime(t *time.Time) *ReviewCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetPaymentID sets the "payment_id" field.
func (rc *ReviewCreate) SetPaymentID(i int64) *ReviewCreate {
	rc.mutation.SetPaymentID(i)
	return rc
}

// SetID sets the "id" field.
func (rc *ReviewCreate) SetID(i int64) *ReviewCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetPayment sets the "payment" edge to the Payment entity.
func (rc *ReviewCreate) SetPayment(p *Payment) *ReviewCreate {
	return rc.SetPaymentID(p.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (rc *ReviewCreate) Mutation() *ReviewMutation {
	return rc.mutation
}

// Save creates the Review in the database.
func (rc *ReviewCreate) Save(ctx context.Context) (*Review, error) {
	rc.defaults()
	return withHooks[*Review, ReviewMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReviewCreate) SaveX(ctx context.Context) *Review {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReviewCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReviewCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReviewCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := review.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := review.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReviewCreate) check() error {
	if _, ok := rc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "Review.event"`)}
	}
	if v, ok := rc.mutation.Event(); ok {
		if err := review.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Review.event": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ReviewerID(); !ok {
		return &ValidationError{Name: "reviewer_id", err: errors.New(`ent: missing required field "Review.reviewer_id"`)}
	}
	if v, ok := rc.mutation.ReviewerID(); ok {
		if err := review.ReviewerIDValidator(v); err != nil {
			return &ValidationError{Name: "reviewer_id", err: fmt.Errorf(`ent: validator failed for field "Review.reviewer_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Review.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Review.update_time"`)}
	}
	if _, ok := rc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment_id", err: errors.New(`ent: missing required field "Review.payment_id"`)}
	}
	if _, ok := rc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "Review.payment"`)}
	}
	return nil
}

func (rc *ReviewCreate) sqlSave(ctx context.Context) (*Review, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReviewCreate) createSpec() (*Review, *sqlgraph.CreateSpec) {
	var (
		_node = &Review{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: review.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: review.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Event(); ok {
		_spec.SetField(review.FieldEvent, field.TypeEnum, value)
		_node.Event = value
	}
	if value, ok := rc.mutation.ReviewerID(); ok {
		_spec.SetField(review.FieldReviewerID, field.TypeString, value)
		_node.ReviewerID = value
	}
	if value, ok := rc.mutation.Comment(); ok {
		_spec.SetField(review.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(review.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(review.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := rc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.PaymentTable,
			Columns: []string{review.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.Create().
//		SetEvent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetEvent(v+v).
//		}).
//		Exec(ctx)
func (rc *ReviewCreate) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertOne {
	rc.conflict = opts
	return &ReviewUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReviewCreate) OnConflictColumns(columns ...string) *ReviewUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertOne{
		create: rc,
	}
}

type (
	// ReviewUpsertOne is the builder for "upsert"-ing
	//  one Review node.
	ReviewUpsertOne struct {
		create *ReviewCreate
	}

	// ReviewUpsert is the "OnConflict" setter.
	ReviewUpsert struct {
		*sql.UpdateSet
	}
)

// SetEvent sets the "event" field.
func (u *ReviewUpsert) SetEvent(v review.Event) *ReviewUpsert {
	u.Set(review.FieldEvent, v)
	return u
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateEvent() *ReviewUpsert {
	u.SetExcluded(review.FieldEvent)
	return u
}

// SetComment sets the "comment" field.
func (u *ReviewUpsert) SetComment(v string) *ReviewUpsert {
	u.Set(review.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateComment() *ReviewUpsert {
	u.SetExcluded(review.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *ReviewUpsert) ClearComment() *ReviewUpsert {
	u.SetNull(review.FieldComment)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ReviewUpsert) SetUpdateTime(v time.Time) *ReviewUpsert {
	u.Set(review.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateUpdateTime() *ReviewUpsert {
	u.SetExcluded(review.FieldUpdateTime)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *ReviewUpsert) SetPaymentID(v int64) *ReviewUpsert {
	u.Set(review.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ReviewUpsert) UpdatePaymentID() *ReviewUpsert {
	u.SetExcluded(review.FieldPaymentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReviewUpsertOne) UpdateNewValues() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(review.FieldID)
		}
		if _, exists := u.create.mutation.ReviewerID(); exists {
			s.SetIgnore(review.FieldReviewerID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(review.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReviewUpsertOne) Ignore() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertOne) DoNothing() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreate.OnConflict
// documentation for more info.
func (u *ReviewUpsertOne) Update(set func(*ReviewUpsert)) *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvent sets the "event" field.
func (u *ReviewUpsertOne) SetEvent(v review.Event) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateEvent() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateEvent()
	})
}

// SetComment sets the "comment" field.
func (u *ReviewUpsertOne) SetComment(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateComment() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ReviewUpsertOne) ClearComment() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearComment()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ReviewUpsertOne) SetUpdateTime(v time.Time) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateUpdateTime() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *ReviewUpsertOne) SetPaymentID(v int64) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdatePaymentID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdatePaymentID()
	})
}

// Exec executes the query.
func (u *ReviewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReviewUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReviewUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReviewCreateBulk is the builder for creating many Review entities in bulk.
type ReviewCreateBulk struct {
	config
	builders []*ReviewCreate
	conflict []sql.ConflictOption
}

// Save creates the Review entities in the database.
func (rcb *ReviewCreateBulk) Save(ctx context.Context) ([]*Review, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Review, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReviewCreateBulk) SaveX(ctx context.Context) []*Review {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReviewCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetEvent(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReviewCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertBulk {
	rcb.conflict = opts
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReviewCreateBulk) OnConflictColumns(columns ...string) *ReviewUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// ReviewUpsertBulk is the builder for "upsert"-ing
// a bulk of Review nodes.
type ReviewUpsertBulk struct {
	create *ReviewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReviewUpsertBulk) UpdateNewValues() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(review.FieldID)
			}
			if _, exists := b.mutation.ReviewerID(); exists {
				s.SetIgnore(review.FieldReviewerID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(review.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReviewUpsertBulk) Ignore() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertBulk) DoNothing() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreateBulk.OnConflict
// documentation for more info.
func (u *ReviewUpsertBulk) Update(set func(*ReviewUpsert)) *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvent sets the "event" field.
func (u *ReviewUpsertBulk) SetEvent(v review.Event) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateEvent() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateEvent()
	})
}

// SetComment sets the "comment" field.
func (u *ReviewUpsertBulk) SetComment(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateComment() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ReviewUpsertBulk) ClearComment() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearComment()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ReviewUpsertBulk) SetUpdateTime(v time.Time) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateUpdateTime() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *ReviewUpsertBulk) SetPaymentID(v int64) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdatePaymentID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdatePaymentID()
	})
}

// Exec executes the query.
func (u *ReviewUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReviewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
