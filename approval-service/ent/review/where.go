// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lht102/workflow-playground/approval-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldID, id))
}

// ReviewerID applies equality check predicate on the "reviewer_id" field. It's identical to ReviewerIDEQ.
func ReviewerID(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldReviewerID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldUpdateTime, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v int64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldPaymentID, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v Event) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v Event) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...Event) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...Event) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldEvent, vs...))
}

// ReviewerIDEQ applies the EQ predicate on the "reviewer_id" field.
func ReviewerIDEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldReviewerID, v))
}

// ReviewerIDNEQ applies the NEQ predicate on the "reviewer_id" field.
func ReviewerIDNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldReviewerID, v))
}

// ReviewerIDIn applies the In predicate on the "reviewer_id" field.
func ReviewerIDIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldReviewerID, vs...))
}

// ReviewerIDNotIn applies the NotIn predicate on the "reviewer_id" field.
func ReviewerIDNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldReviewerID, vs...))
}

// ReviewerIDGT applies the GT predicate on the "reviewer_id" field.
func ReviewerIDGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldReviewerID, v))
}

// ReviewerIDGTE applies the GTE predicate on the "reviewer_id" field.
func ReviewerIDGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldReviewerID, v))
}

// ReviewerIDLT applies the LT predicate on the "reviewer_id" field.
func ReviewerIDLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldReviewerID, v))
}

// ReviewerIDLTE applies the LTE predicate on the "reviewer_id" field.
func ReviewerIDLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldReviewerID, v))
}

// ReviewerIDContains applies the Contains predicate on the "reviewer_id" field.
func ReviewerIDContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldReviewerID, v))
}

// ReviewerIDHasPrefix applies the HasPrefix predicate on the "reviewer_id" field.
func ReviewerIDHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldReviewerID, v))
}

// ReviewerIDHasSuffix applies the HasSuffix predicate on the "reviewer_id" field.
func ReviewerIDHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldReviewerID, v))
}

// ReviewerIDEqualFold applies the EqualFold predicate on the "reviewer_id" field.
func ReviewerIDEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldReviewerID, v))
}

// ReviewerIDContainsFold applies the ContainsFold predicate on the "reviewer_id" field.
func ReviewerIDContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldReviewerID, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Review {
	return predicate.Review(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Review {
	return predicate.Review(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldComment, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldUpdateTime, v))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v int64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v int64) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...int64) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...int64) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldPaymentID, vs...))
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		p(s.Not())
	})
}
