// Code generated by ent, DO NOT EDIT.

package review

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldReviewerID holds the string denoting the reviewer_id field in the database.
	FieldReviewerID = "reviewer_id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// EdgePayment holds the string denoting the payment edge name in mutations.
	EdgePayment = "payment"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// PaymentTable is the table that holds the payment relation/edge.
	PaymentTable = "reviews"
	// PaymentInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentInverseTable = "payments"
	// PaymentColumn is the table column denoting the payment relation/edge.
	PaymentColumn = "payment_id"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldEvent,
	FieldReviewerID,
	FieldComment,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPaymentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ReviewerIDValidator is a validator for the "reviewer_id" field. It is called by the builders before save.
	ReviewerIDValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Event defines the type for the "event" enum field.
type Event string

// Event values.
const (
	EventAPPROVE Event = "APPROVE"
	EventREJECT  Event = "REJECT"
)

func (e Event) String() string {
	return string(e)
}

// EventValidator is a validator for the "event" field enum values. It is called by the builders before save.
func EventValidator(e Event) error {
	switch e {
	case EventAPPROVE, EventREJECT:
		return nil
	default:
		return fmt.Errorf("review: invalid enum value for event field: %q", e)
	}
}
