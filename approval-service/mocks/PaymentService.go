// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	approvalservice "github.com/lht102/workflow-playground/approval-service"

	ent "github.com/lht102/workflow-playground/approval-service/ent"

	mock "github.com/stretchr/testify/mock"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

type PaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentService) EXPECT() *PaymentService_Expecter {
	return &PaymentService_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function with given fields: ctx, request
func (_m *PaymentService) CreatePayment(ctx context.Context, request *approvalservice.CreatePaymentRequest) (*ent.Payment, error) {
	ret := _m.Called(ctx, request)

	var r0 *ent.Payment
	if rf, ok := ret.Get(0).(func(context.Context, *approvalservice.CreatePaymentRequest) *ent.Payment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *approvalservice.CreatePaymentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type PaymentService_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//  - ctx context.Context
//  - request *approvalservice.CreatePaymentRequest
func (_e *PaymentService_Expecter) CreatePayment(ctx interface{}, request interface{}) *PaymentService_CreatePayment_Call {
	return &PaymentService_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, request)}
}

func (_c *PaymentService_CreatePayment_Call) Run(run func(ctx context.Context, request *approvalservice.CreatePaymentRequest)) *PaymentService_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*approvalservice.CreatePaymentRequest))
	})
	return _c
}

func (_c *PaymentService_CreatePayment_Call) Return(_a0 *ent.Payment, _a1 error) *PaymentService_CreatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreatePaymentReview provides a mock function with given fields: ctx, request
func (_m *PaymentService) CreatePaymentReview(ctx context.Context, request *approvalservice.CreatePaymentReviewRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *approvalservice.CreatePaymentReviewRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentService_CreatePaymentReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentReview'
type PaymentService_CreatePaymentReview_Call struct {
	*mock.Call
}

// CreatePaymentReview is a helper method to define mock.On call
//  - ctx context.Context
//  - request *approvalservice.CreatePaymentReviewRequest
func (_e *PaymentService_Expecter) CreatePaymentReview(ctx interface{}, request interface{}) *PaymentService_CreatePaymentReview_Call {
	return &PaymentService_CreatePaymentReview_Call{Call: _e.mock.On("CreatePaymentReview", ctx, request)}
}

func (_c *PaymentService_CreatePaymentReview_Call) Run(run func(ctx context.Context, request *approvalservice.CreatePaymentReviewRequest)) *PaymentService_CreatePaymentReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*approvalservice.CreatePaymentReviewRequest))
	})
	return _c
}

func (_c *PaymentService_CreatePaymentReview_Call) Return(_a0 error) *PaymentService_CreatePaymentReview_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetPayment provides a mock function with given fields: ctx, request
func (_m *PaymentService) GetPayment(ctx context.Context, request *approvalservice.GetPaymentRequest) (*ent.Payment, error) {
	ret := _m.Called(ctx, request)

	var r0 *ent.Payment
	if rf, ok := ret.Get(0).(func(context.Context, *approvalservice.GetPaymentRequest) *ent.Payment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *approvalservice.GetPaymentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_GetPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayment'
type PaymentService_GetPayment_Call struct {
	*mock.Call
}

// GetPayment is a helper method to define mock.On call
//  - ctx context.Context
//  - request *approvalservice.GetPaymentRequest
func (_e *PaymentService_Expecter) GetPayment(ctx interface{}, request interface{}) *PaymentService_GetPayment_Call {
	return &PaymentService_GetPayment_Call{Call: _e.mock.On("GetPayment", ctx, request)}
}

func (_c *PaymentService_GetPayment_Call) Run(run func(ctx context.Context, request *approvalservice.GetPaymentRequest)) *PaymentService_GetPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*approvalservice.GetPaymentRequest))
	})
	return _c
}

func (_c *PaymentService_GetPayment_Call) Return(_a0 *ent.Payment, _a1 error) *PaymentService_GetPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListPayments provides a mock function with given fields: ctx, request
func (_m *PaymentService) ListPayments(ctx context.Context, request *approvalservice.ListPaymentsRequest) (*approvalservice.ListPaymentsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *approvalservice.ListPaymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *approvalservice.ListPaymentsRequest) *approvalservice.ListPaymentsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*approvalservice.ListPaymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *approvalservice.ListPaymentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_ListPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPayments'
type PaymentService_ListPayments_Call struct {
	*mock.Call
}

// ListPayments is a helper method to define mock.On call
//  - ctx context.Context
//  - request *approvalservice.ListPaymentsRequest
func (_e *PaymentService_Expecter) ListPayments(ctx interface{}, request interface{}) *PaymentService_ListPayments_Call {
	return &PaymentService_ListPayments_Call{Call: _e.mock.On("ListPayments", ctx, request)}
}

func (_c *PaymentService_ListPayments_Call) Run(run func(ctx context.Context, request *approvalservice.ListPaymentsRequest)) *PaymentService_ListPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*approvalservice.ListPaymentsRequest))
	})
	return _c
}

func (_c *PaymentService_ListPayments_Call) Return(_a0 *approvalservice.ListPaymentsResponse, _a1 error) *PaymentService_ListPayments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPaymentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentService(t mockConstructorTestingTNewPaymentService) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
